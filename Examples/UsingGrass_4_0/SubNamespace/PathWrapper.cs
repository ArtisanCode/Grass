//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ArtisanCode.UsingGrass.SubNamespace
{
    using System;
    using System.CodeDom.Compiler;
    using System.IO;
    using System.Text;
    
    
    [GeneratedCode("0.0.0.1", "ArtisanCode.Grass")]
    public partial class PathWrapper : IPath
    {
        
        public virtual string ChangeExtension(string path, string extension)
        {
            return Path.ChangeExtension(path, extension);
        }
        
        public virtual string Combine(string path1, string path2)
        {
            return Path.Combine(path1, path2);
        }
        
        public virtual string Combine(string path1, string path2, string path3)
        {
            return Path.Combine(path1, path2, path3);
        }
        
        public virtual string Combine(string path1, string path2, string path3, string path4)
        {
            return Path.Combine(path1, path2, path3, path4);
        }
        
        public virtual string Combine(string[] paths)
        {
            return Path.Combine(paths);
        }
        
        public virtual string GetDirectoryName(string path)
        {
            return Path.GetDirectoryName(path);
        }
        
        public virtual string GetExtension(string path)
        {
            return Path.GetExtension(path);
        }
        
        public virtual string GetFileName(string path)
        {
            return Path.GetFileName(path);
        }
        
        public virtual string GetFileNameWithoutExtension(string path)
        {
            return Path.GetFileNameWithoutExtension(path);
        }
        
        public virtual string GetFullPath(string path)
        {
            return Path.GetFullPath(path);
        }
        
        public virtual char[] GetInvalidFileNameChars()
        {
            return Path.GetInvalidFileNameChars();
        }
        
        public virtual char[] GetInvalidPathChars()
        {
            return Path.GetInvalidPathChars();
        }
        
        public virtual string GetPathRoot(string path)
        {
            return Path.GetPathRoot(path);
        }
        
        public virtual string GetRandomFileName()
        {
            return Path.GetRandomFileName();
        }
        
        public virtual string GetTempFileName()
        {
            return Path.GetTempFileName();
        }
        
        public virtual string GetTempPath()
        {
            return Path.GetTempPath();
        }
        
        public virtual bool HasExtension(string path)
        {
            return Path.HasExtension(path);
        }
        
        public virtual bool IsPathRooted(string path)
        {
            return Path.IsPathRooted(path);
        }
    }
}
